{"componentChunkName":"component---src-templates-docs-js","path":"/docs/plugin-mechanism.html","result":{"data":{"markdownRemark":{"html":"<p>ScandiPWA v3 (currently in beta) supports frontend plugins, which allow reusing one piece of code throughout a lot of completely different projects. This guide is devoted to explaining all the functionality related to plugins.</p>\n<h2 id=\"watch-outdated-explanation-videos-with-correct-general-approach\"><a href=\"#watch-outdated-explanation-videos-with-correct-general-approach\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Watch outdated explanation videos with correct general approach</h2>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>this videos are going to be updated, they are <strong>much less relevant</strong> then the text documentation. Use them to understand the main workflows, but seek <strong>ONLY</strong> these guidelines that are described in this article, because many things changed since these two videos have been released.</p>\n</blockquote>\n<h3 id=\"implementing-an-extension-from-scratch\"><a href=\"#implementing-an-extension-from-scratch\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementing an extension from scratch</h3>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/9f6rpIrlNMk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>\n<h3 id=\"implementing-an-extension-from-customization\"><a href=\"#implementing-an-extension-from-customization\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementing an extension from customization</h3>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/N2TJJbSDTbM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>\n<h2 id=\"extensions-file-structure\"><a href=\"#extensions-file-structure\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extension’s file structure</h2>\n<p>ScandiPWA extension is M2 composer package with one extra directory - <code class=\"gatsby-code-text\">scandipwa</code>. Inside of it ScandiPWA frontend-related functionality is stored. Any other M2 related folders with backend-related functionality can be stored in such package. You see <code class=\"gatsby-code-text\">etc</code> and <code class=\"gatsby-code-text\">Model</code> in this example, but these are not the only possible ones.</p>\n<p>All <em>directories</em> inside of <code class=\"gatsby-code-text\">scandipwa</code> are optional, nevertheless following the provided structure is mandatory. You see <code class=\"gatsby-code-text\">app</code> and <code class=\"gatsby-code-text\">sw</code> subdirectories in it, these folders’ structure is the same as you see in <code class=\"gatsby-code-text\">vendor/scandipwa/source/src/(app|sw)</code> and they have the same meaning: inside of them are all parts that your extension requires: extra components, queries, routes etc.</p>\n<p><code class=\"gatsby-code-text\">Plugin</code> directory contains plugin definitions: which functionality parts are you plugging into and how you want to change their behaviour. More about that below. All the files with <code class=\"gatsby-code-text\">.plugin.js</code> extension will be found there and imported into the application.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"55894882640778710000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📦my-awesome-extension\n ┣ 📂src\n ┃ ┣ 📂etc\n ┃ ┃ ┗ # ...\n ┃ ┣ 📂Model\n ┃ ┃ ┗ # ...\n ┃ ┗ 📂scandipwa   # Frontend-related functionality\n ┃   ┣ 📂 app      # Plugins and functionality for the app context\n ┃   ┃ ┣ 📂component\n ┃   ┃ ┣ 📂query\n ┃   ┃ ┣ 📂route\n ┃   ┃ ┣ 📂store\n ┃   ┃ ┣ 📂util\n ┃   ┃ ┗ 📂plugin  # Plugging logic declarations\n ┃   ┃   ┗ 📜<name>.plugin.js\n ┃   ┗ 📂 sw       # Plugins and functionality for the Service Worker context\n ┃     ┣ 📂handler\n ┃     ┣ 📂util\n ┃     ┗ 📂plugin  # Plugging logic declarations\n ┃       ┗ 📜<name>.plugin.js\n ┣ 📜package.json  # JS dependencies\n ┗ 📜composer.json # Composer dependencies and the PACKAGE NAME which is mandatory`, `55894882640778710000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📦my-awesome-extension\n ┣ 📂src\n ┃ ┣ 📂etc\n ┃ ┃ ┗ <span class=\"token comment\"># ...</span>\n ┃ ┣ 📂Model\n ┃ ┃ ┗ <span class=\"token comment\"># ...</span>\n ┃ ┗ 📂scandipwa   <span class=\"token comment\"># Frontend-related functionality</span>\n ┃   ┣ 📂 app      <span class=\"token comment\"># Plugins and functionality for the app context</span>\n ┃   ┃ ┣ 📂component\n ┃   ┃ ┣ 📂query\n ┃   ┃ ┣ 📂route\n ┃   ┃ ┣ 📂store\n ┃   ┃ ┣ 📂util\n ┃   ┃ ┗ 📂plugin  <span class=\"token comment\"># Plugging logic declarations</span>\n ┃   ┃   ┗ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.plugin.js\n ┃   ┗ 📂 sw       <span class=\"token comment\"># Plugins and functionality for the Service Worker context</span>\n ┃     ┣ 📂handler\n ┃     ┣ 📂util\n ┃     ┗ 📂plugin  <span class=\"token comment\"># Plugging logic declarations</span>\n ┃       ┗ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.plugin.js\n ┣ 📜package.json  <span class=\"token comment\"># JS dependencies</span>\n ┗ 📜composer.json <span class=\"token comment\"># Composer dependencies and the PACKAGE NAME which is mandatory</span></code></pre></div>\n<h2 id=\"a-step-by-step-algorithm-of-creating-a-simple-extension\"><a href=\"#a-step-by-step-algorithm-of-creating-a-simple-extension\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A step-by-step algorithm of creating a simple extension</h2>\n<p>This document is a more relevant alternative to the video tutorials above. You are still welcome to watch them in order to learn the general approach from an example. Start with understanding how you wish to change ScandiPWA logic. Find the places which need modification.</p>\n<ol>\n<li>Create a <code class=\"gatsby-code-text\">localmodules</code> directory in the magento root of your application. Then create a composer package there. Inside of it, in <code class=\"gatsby-code-text\">src/scandipwa/app/plugin</code>, create <code class=\"gatsby-code-text\">&lt;name&gt;.plugin.js</code> file.</li>\n<li>Create a function that is going to wrap around the original namespace member, following the guidelines above. This function is going to be called instead of the original member, very similar to the Magento 2 <strong>“around plugins.”</strong></li>\n</ol>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>It is recommended to stick to the naming convention regarding the arguments of these functions.</p>\n</blockquote>\n<p>Each member which wraps around a <strong><em>function</em></strong> has the following arguments.</p>\n<ul>\n<li><code class=\"gatsby-code-text\">args</code> is an array of original arguments that are passed to the function this one is wrapped around.</li>\n<li><code class=\"gatsby-code-text\">callback</code> is a function that calls the next plugin if there is one, or the original method (bound to the instance), when all plugins defined for this method are applied.</li>\n<li><code class=\"gatsby-code-text\">instance</code> references the instance of class that you are plugging into.</li>\n</ul>\n<p>Each member which wraps around a <strong><em>property</em></strong>  has the following arguments:</p>\n<ul>\n<li><code class=\"gatsby-code-text\">prop</code> is a member you are plugging into.</li>\n<li><code class=\"gatsby-code-text\">instance</code> same as above.</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"46697766839104780000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// This wraps around the member function, logs the arguments and adds one to the first argument\n// It is essential that wrapper function is an arrow function, if you are writing a class.\nconst aroundFunction = (args, callback, instance) => {\n\t// Arguments, which have been passed to the member\n\t// Either original or already modified by other plugins.\n    console.log(args);\n\n\t// Use array destructuring to get specific arguments from the array\n\tconst [something] = args;\n\n\t// The callback is always bound to the \\`instance\\`, you do not need to provide context here.\n\t// It is impossible to bind the callback to something else hence.\n    callback(...args);\n}\n\n// This wraps around a property\nconst property = (prop, instance) => {\n    return {\n        ...prop,\n        // And adds this new value to it\n        someAddedValue: 'new value!'\n    }\n}\n\nconst classWrapper = (Class) => {\n    // Return the original class intact\n    return Class;\n\n    // Return the original class wrapped into HOC or something else\n    return withRouter(Class);\n    return connect(...)(Class);\n\n    // Replace the original class with something else\n\t// DANGEROUS and NOT RECOMMENDED\n    return OtherClass;\n}`, `46697766839104780000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// This wraps around the member function, logs the arguments and adds one to the first argument</span>\n<span class=\"token comment\">// It is essential that wrapper function is an arrow function, if you are writing a class.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">aroundFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> instance</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Arguments, which have been passed to the member</span>\n\t<span class=\"token comment\">// Either original or already modified by other plugins.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Use array destructuring to get specific arguments from the array</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>something<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The callback is always bound to the `instance`, you do not need to provide context here.</span>\n\t<span class=\"token comment\">// It is impossible to bind the callback to something else hence.</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This wraps around a property</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">property</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">,</span> instance</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>prop<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// And adds this new value to it</span>\n        someAddedValue<span class=\"token operator\">:</span> <span class=\"token string\">'new value!'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">classWrapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Class</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Return the original class intact</span>\n    <span class=\"token keyword\">return</span> Class<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Return the original class wrapped into HOC or something else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>Class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Replace the original class with something else</span>\n\t<span class=\"token comment\">// DANGEROUS and NOT RECOMMENDED</span>\n    <span class=\"token keyword\">return</span> OtherClass<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>Create the configuration in the bottom of <code class=\"gatsby-code-text\">.plugin.js</code> file. This object must be a default export. The following things are defined in this configuration:</li>\n<li>Which namespace to modify</li>\n<li>\n<p>How what exactly in the namespace would you like to modify</p>\n<ul>\n<li><strong>‘member-function’</strong> plugins intercept calls to <strong>instance members</strong>. These plugins are used to change the behavior of member functions, which are called on instance.</li>\n<li><strong>‘member-property’</strong> is an approach to change <strong>properties</strong>, which are not available on prototypes, e.g. state in a way it’s defined throughout the ScandiPWA (<code class=\"gatsby-code-text\">state = { ... };</code>). Do not use this for class properties, which are arrow functions (<code class=\"gatsby-code-text\">onUpdate = () =&gt; {....}</code>), use the <em>member-function</em> for that.</li>\n<li><strong>‘static-member’</strong> plugins enable changing classes’ <strong>static members</strong>.</li>\n<li><strong>‘function’</strong> is an approach to change <strong>functions</strong> which are not class members, e.g. <code class=\"gatsby-code-text\">mapStateToProps</code> or <code class=\"gatsby-code-text\">mapDispatchToProps</code>.</li>\n<li><strong>‘class’</strong> is an approach to modify <strong>classes</strong>. These plugins are able to modify the class, wrapping it into HOC or, in extreme cases, replacing it with other class. Replacing is not recommended because it is not well-compatible with potential other plugins wrapping around members of the same namespaces.</li>\n</ul>\n</li>\n<li>Name of the member to modify (for everything apart of ‘function’ and ‘class’ plugins, which are the only namespaces members and have reduced structure)</li>\n<li>Optional: a position, in which this plugin will be called. <strong>Defaults to 100</strong>. There may be multiple plugins for a single member if there are several extensions active in the application. The closer the position to 0 - the sooner it is called. The higher a position - the later. Non-unique.</li>\n</ol>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>You can create class members that do not exist in the original classes and they will be called as you’d expect writing them directly in the class. It is useful when you need some lifecycle member functions that are not present in the original class. <strong>REMEMBER</strong> to call <code class=\"gatsby-code-text\">callback</code> even if the original member is not present, that will make your plugin compatible with other plugins around the same member, by calling them after your plugin finishes its work.</p>\n</blockquote>\n<p>Configuration should follow this format:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"2191686490681132800\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const config = {\n    namespace: {\n        'member-function': {\n            '<name>': Plugins1\n        },\n        'member-property': {\n            '<name>': Plugins2\n        },\n        'static-member': {\n            '<name>': Plugins3\n        },\n\n        // Reduced structure for functions and classes\n        'function': Plugins4,\n        'class': Plugins5\n    }\n}`, `2191686490681132800`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    namespace<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'member-function'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> Plugins1\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'member-property'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> Plugins2\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'static-member'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> Plugins3\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// Reduced structure for functions and classes</span>\n        <span class=\"token string\">'function'</span><span class=\"token operator\">:</span> Plugins4<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'class'</span><span class=\"token operator\">:</span> Plugins5\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Where <code class=\"gatsby-code-text\">Plugins</code> is either a function, an object or an Array of functions/objects. See valid <code class=\"gatsby-code-text\">Plugins</code> blocks’ example below.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"20022848310619603000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// Simplest option, you are going to use it in most cases\nconst Plugins1 = A;\n\n// If you need more granular logic around one original member\nconst Plugins2 = [B, C];\n\n// Specify a position to execute your plugins sooner/later in the pipeline\nconst Plugins3 = {\n    position: 0,\n    implementation: aVeryImportantFunction\n};\n\n// Same as 2nd option, but with positions.\nconst Plugins4 = [\n    {\n        position: 0,\n        implementation: oneMoreVeryImportantFunction\n    },\n    {\n        position: 1000,\n        implementation: notVeryImportantFunction\n    }\n];`, `20022848310619603000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Simplest option, you are going to use it in most cases</span>\n<span class=\"token keyword\">const</span> Plugins1 <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If you need more granular logic around one original member</span>\n<span class=\"token keyword\">const</span> Plugins2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Specify a position to execute your plugins sooner/later in the pipeline</span>\n<span class=\"token keyword\">const</span> Plugins3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    position<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    implementation<span class=\"token operator\">:</span> aVeryImportantFunction\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Same as 2nd option, but with positions.</span>\n<span class=\"token keyword\">const</span> Plugins4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        position<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        implementation<span class=\"token operator\">:</span> oneMoreVeryImportantFunction\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        position<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        implementation<span class=\"token operator\">:</span> notVeryImportantFunction\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The example below demonstrates an example of multiple syntax opportunities for writing a configuration part.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"93382738242723680000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const config = {\n    namespace: {\n        'member-function': {\n            '<name>': B\n        },\n        'member-property': {\n            '<name>': [\n                {\n                    implementation: D\n                }\n            ]\n        },\n        'static-member': {\n            '<name>': [\n                {\n                    position: E,\n                    implementation: F\n                }\n            ]\n        },\n        'function': [ I, J ],\n        'class': K\n    }\n}`, `93382738242723680000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    namespace<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'member-function'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> <span class=\"token constant\">B</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'member-property'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    implementation<span class=\"token operator\">:</span> <span class=\"token constant\">D</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'static-member'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    position<span class=\"token operator\">:</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">,</span>\n                    implementation<span class=\"token operator\">:</span> <span class=\"token constant\">F</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'function'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">I</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">J</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'class'</span><span class=\"token operator\">:</span> <span class=\"token constant\">K</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>Activate your plugin. In the FE root of your theme, there is a file called <code class=\"gatsby-code-text\">scandipwa.json</code>. It is responsible for theme’s configuration. Active plugins should be defined there.</li>\n</ol>\n<p>Contents:</p>\n<ul>\n<li><code class=\"gatsby-code-text\">&lt;extension name&gt;</code>: should be picked by you, it is not related to any functionality, just denotes which plugin files are meant for which extension. Put anything you like here.</li>\n<li><code class=\"gatsby-code-text\">&lt;path&gt;</code>: a single relative path from Magento root to the extension’s root.</li>\n</ul>\n<p>The format for the ‘extensions’ block of this file is the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"31033868493857165000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n    // ...\n    &quot;extensions&quot;: {\n        &quot;PayPal&quot;: &quot;vendor/scandipwa/paypal-graphql&quot;,\n        &quot;<extension2>&quot;: &quot;<path2>&quot;,\n        /** other extensions */\n    }\n    // ...\n}`, `31033868493857165000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"PayPal\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vendor/scandipwa/paypal-graphql\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"&lt;extension2>\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;path2>\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/** other extensions */</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"plugins-for-plugins\"><a href=\"#plugins-for-plugins\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugins for plugins!</h2>\n<p>ScandiPWA allows <strong>plugging into plugins</strong>. All classes that your plugin requires should be assigned namespaces by wrapping them into the <code class=\"gatsby-code-text\">middleware</code> function. The only exception is that plugin class in <code class=\"gatsby-code-text\">.plugin.js</code> file <strong>cannot</strong> be plugged into due to configuration builder’s limitations. It still can be overriden as described in the extension guide though.</p>","frontmatter":{"title":"ScandiPWA plugins"},"fields":{"path":"content/docs/plugin-mechanism.md","slug":"/docs/plugin-mechanism.html"}}},"pageContext":{"slug":"/docs/plugin-mechanism.html"}},"staticQueryHashes":[]}